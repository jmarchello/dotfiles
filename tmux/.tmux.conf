# remap prefix to Control + a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

setw -g mode-keys vi

# change key to enter copy mode
unbind [
bind / copy-mode

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection

# # Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi enter
# Linux (get's overwritten if below conditions pass)
bind-key -T copy-mode-vi enter send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
# MacOs
if-shell -b 'test -d /Users' 'bind-key -T copy-mode-vi enter send-keys -X copy-pipe-and-cancel pbcopy'
# WSL
if-shell -b 'test -n "$WSLENV"' 'bind-key -T copy-mode-vi enter send-keys -X copy-pipe-and-cancel clip.exe'

set-option -g renumber-windows on

bind-key j send-key resize-pane -d 5
bind-key k send-key resize-pane -u 5
bind-key h send-key resize-pane -l 5
bind-key l send-key resize-pane -r 5

# set zsh as your default tmux shell
set-option -g default-shell /bin/zsh

# tmux should be pretty, we need 256 color for that
set -g default-terminal "screen-256color"

# mouse mode
set -g mouse on

# don't copy and exit on mouse up
unbind -T copy-mode-vi MouseDragEnd1Pane

# command delay? we don't want that, make it short
set -sg escape-time 1

# allow us to reload our tmux configuration while
# using tmux
bind r source-file ~/.tmux.conf \; display "reloaded!"

# getting interesting now, we use the vertical and horizontal
# symbols to split the screen
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"


# easily changes panes with vi bindings
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R

# run-shell "powerline-daemon -q"
# source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

# vim-tmux-navigator bindings
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l


###################
# Status Bar
###################
set-option -g status-position top

set -g status-fg black
set -g status-bg colour244

set-window-option -g status-left " #S "
set-window-option -g status-left-style fg=black,bg=white

set-window-option -g status-right " #[fg=colour239]%a %b %d  #[fg=black]%I:%M %p "
set-window-option -g status-right-style fg=black,bg=white

set-window-option -g window-status-format " #I: #W#{?window_zoomed_flag, #[fg=blue](z),} "

set-window-option -g window-status-current-format " #I: #W#{?window_zoomed_flag, #[fg=colour033](z),} "
set-window-option -g window-status-current-style fg=white,bg=black
